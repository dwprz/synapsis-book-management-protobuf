// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/book_category/service.proto

package book_category

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookCategoryService_DeleteBookFromCategoryReq_FullMethodName = "/book_category.BookCategoryService/DeleteBookFromCategoryReq"
)

// BookCategoryServiceClient is the client API for BookCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookCategoryServiceClient interface {
	DeleteBookFromCategoryReq(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bookCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookCategoryServiceClient(cc grpc.ClientConnInterface) BookCategoryServiceClient {
	return &bookCategoryServiceClient{cc}
}

func (c *bookCategoryServiceClient) DeleteBookFromCategoryReq(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BookCategoryService_DeleteBookFromCategoryReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookCategoryServiceServer is the server API for BookCategoryService service.
// All implementations must embed UnimplementedBookCategoryServiceServer
// for forward compatibility
type BookCategoryServiceServer interface {
	DeleteBookFromCategoryReq(context.Context, *BookId) (*emptypb.Empty, error)
	mustEmbedUnimplementedBookCategoryServiceServer()
}

// UnimplementedBookCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookCategoryServiceServer struct {
}

func (UnimplementedBookCategoryServiceServer) DeleteBookFromCategoryReq(context.Context, *BookId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookFromCategoryReq not implemented")
}
func (UnimplementedBookCategoryServiceServer) mustEmbedUnimplementedBookCategoryServiceServer() {}

// UnsafeBookCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookCategoryServiceServer will
// result in compilation errors.
type UnsafeBookCategoryServiceServer interface {
	mustEmbedUnimplementedBookCategoryServiceServer()
}

func RegisterBookCategoryServiceServer(s grpc.ServiceRegistrar, srv BookCategoryServiceServer) {
	s.RegisterService(&BookCategoryService_ServiceDesc, srv)
}

func _BookCategoryService_DeleteBookFromCategoryReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).DeleteBookFromCategoryReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookCategoryService_DeleteBookFromCategoryReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).DeleteBookFromCategoryReq(ctx, req.(*BookId))
	}
	return interceptor(ctx, in, info, handler)
}

// BookCategoryService_ServiceDesc is the grpc.ServiceDesc for BookCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book_category.BookCategoryService",
	HandlerType: (*BookCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBookFromCategoryReq",
			Handler:    _BookCategoryService_DeleteBookFromCategoryReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/book_category/service.proto",
}
